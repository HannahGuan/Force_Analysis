<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'How old are you (in years)?': '', 'Are you male or female (M or F)?': '', 'Do you have normal vision and hearing (Y or N)?': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1600, 1200]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="Black" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Prime-Probe" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="Probe_2">
      <TextComponent name="Target">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Target" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.133" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Probe" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="resp_3">
        <Param val="'f', 'g', 'n', 'j' " valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$CorrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="resp_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.834" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ISI">
      <TextComponent name="Blank">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Blank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.033" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Feedback">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#msg variable just needs some value at start&amp;#10;msg=''" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="msg = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;----ROUTINE RESULTS----&quot;);&amp;#10;console.log(`key_response: ${key_response}`);&amp;#10;console.log(`key_correct: ${key_correct}`);&amp;#10;console.log(`psychopy_response_time (ms): ${psychopy_response_time}`);&amp;#10;console.log(`arduino_response_time (ms): ${arduino_response_time}`);&amp;#10;if ((((key_response &amp;&amp; key_correct) &amp;&amp; (arduino_response_time &gt; 0)) &amp;&amp; (arduino_response_time &lt; 900))) {&amp;#10;    msg = &quot; &quot;;&amp;#10;    Feedback = &quot;Correct&quot;;&amp;#10;} else {&amp;#10;    if ((key_response &amp;&amp; (arduino_response_time &lt; 0))) {&amp;#10;        msg = &quot;Too soon&quot;;&amp;#10;        Feedback = &quot;Distractor Response&quot;;&amp;#10;    } else {&amp;#10;        if ((! key_response)) {&amp;#10;            msg = &quot;Error&quot;;&amp;#10;            Feedback = &quot;Omission&quot;;&amp;#10;        } else {&amp;#10;            if ((key_response &amp;&amp; (arduino_response_time &gt; 900))) {&amp;#10;                msg = &quot;Too Slow&quot;;&amp;#10;                Feedback = &quot;TooSlow&quot;;&amp;#10;            } else {&amp;#10;                msg = &quot;Error&quot;;&amp;#10;                Feedback = &quot;Incorrect&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;Feedback&quot;, Feedback);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="print(&quot;----ROUTINE RESULTS----&quot;)&amp;#10;print(f&quot;key_response: {key_response}&quot;)&amp;#10;print(f&quot;key_correct: {key_correct}&quot;)&amp;#10;print(f&quot;psychopy_response_time (ms): {psychopy_response_time}&quot;)&amp;#10;print(f&quot;arduino_response_time (ms): {arduino_response_time}&quot;)&amp;#10;&amp;#10;#if key_resp.keys and key_resp.corr and key_resp.rt &gt; 0.933 and key_resp.rt &lt; 1.833:#stored on last run routine&amp;#10;if key_response and key_correct and arduino_response_time &gt; 0 and arduino_response_time &lt; 900:&amp;#10;  msg=&quot; &quot;#Correct! RT=%.3f&quot; %(resp.rt)&amp;#10;  Feedback = &quot;Correct&quot;&amp;#10;#elif key_resp.keys and key_resp.rt &lt; 0.933:&amp;#10;elif key_response and arduino_response_time &lt; 0:&amp;#10;  msg = &quot;Too soon&quot;&amp;#10;  Feedback = &quot;Distractor Response&quot;&amp;#10;#elif not (key_resp.keys):&amp;#10;elif not key_response:&amp;#10;    msg = &quot;Error&quot;&amp;#10;    Feedback = &quot;Omission&quot;&amp;#10;#elif key_resp.keys and key_resp.rt &gt; 1.833:&amp;#10;elif key_response and arduino_response_time &gt; 900:&amp;#10;    msg = &quot;Too Slow&quot;&amp;#10;    Feedback = &quot;TooSlow&quot;&amp;#10;else:&amp;#10;  msg=&quot;Error&quot;&amp;#10;  Feedback = &quot;Incorrect&quot;&amp;#10;  &amp;#10;thisExp.addData('Feedback', Feedback)&amp;#10;&amp;#10;#Use the statement below when converting to online&amp;#10;#psychoJS.experiment.addData('Feedback', Feedback)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Message">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Message" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.200" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Trial">
      <KeyboardComponent name="key_resp">
        <Param val="'f','g','n','j' " valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="num" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="Distract">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$Distractor" valType="file" updates="set during: Trial.ISI_2" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Distract" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[0, 0]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[400, 400]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.46666666666" valType="num" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="8" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="Targ">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$Target" valType="file" updates="set during: Trial.ISI_2" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Targ" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[0, 0]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[400,400]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1.400" valType="num" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="8" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <StaticComponent name="ISI_2">
        <Param val="" valType="code" updates="None" name="code"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ISI_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.4" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
      </StaticComponent>
      <CodeComponent name="key_trial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="p.send_flag(0);&amp;#10;key_correct = false;&amp;#10;key_response = null;&amp;#10;psychopy_response_time = null;&amp;#10;arduino_response_time = null;&amp;#10;distract_stimulus_started = false;&amp;#10;distract_stimulus_ended = false;&amp;#10;target_stimulus_started = false;&amp;#10;target_stimulus_ended = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="p.send_flag(0)&amp;#10;key_correct = False&amp;#10;key_response = None&amp;#10;psychopy_response_time = None&amp;#10;arduino_response_time = None&amp;#10;&amp;#10;distract_stimulus_started = False&amp;#10;distract_stimulus_ended = False&amp;#10;target_stimulus_started = False&amp;#10;target_stimulus_ended = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# TODO: send flags on stimluli onset&amp;#10;#if t &gt; 0.5 and t &lt; 0.633:&amp;#10;#    p.send_flag(1)&amp;#10;#elif t &gt; 1.433 and t &lt; 1.566:&amp;#10;#    p.send_flag(2)&amp;#10;&amp;#10;# TODO: send nonzero flags while stimuli are &quot;on&quot;&amp;#10;if not distract_stimulus_started and t &gt; 0.5 and t &lt; 0.633:&amp;#10;    win.callOnFlip(p.send_flag,1)&amp;#10;    distractor_onset = t&amp;#10;    distract_stimulus_started = True&amp;#10;&amp;#10;if not distract_stimulus_ended and t &gt; 0.633 and t &lt; 1.433:&amp;#10;    win.callOnFlip(p.send_flag,0)&amp;#10;    distractor_offset = t&amp;#10;    distract_stimulus_ended = True&amp;#10;    &amp;#10;if not target_stimulus_started and t &gt; 1.433 and t &lt; 1.566:&amp;#10;    win.callOnFlip(p.send_flag,2)&amp;#10;    target_onset = t&amp;#10;    target_stimulus_started = True&amp;#10;    &amp;#10;if not target_stimulus_ended and t &gt; 1.566:&amp;#10;    win.callOnFlip(p.send_flag,0)&amp;#10;    target_offset = t&amp;#10;    target_stimulus_ended = True&amp;#10;&amp;#10;which_key, press_time = p.kb_check(p.get_key_index([&quot;F&quot;,&quot;G&quot;,&quot;J&quot;,&quot;N&quot;,&quot;ESC&quot;]))&amp;#10;if key_response is None and which_key.size != 0:&amp;#10;    psychopy_response_time = (t - target_onset) * 1000.0&amp;#10;    #print(f&quot;{which_key} was pressed at {press_time}&quot;)&amp;#10;    key_response = p.get_key(which_key[0])&amp;#10;    key_press_time = press_time[0]&amp;#10;    if key_response == &quot;ESC&quot;:&amp;#10;        p.close()  # close the connection to the keyboard, wait for background thread to close&amp;#10;        core.quit()  # quit the experiment&amp;#10;    key_correct = corrAns.upper() == key_response&amp;#10;    #p.reset_digital_state()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((((! distract_stimulus_started) &amp;&amp; (t &gt; 0.5)) &amp;&amp; (t &lt; 0.633))) {&amp;#10;    psychoJS.window.callOnFlip(p.send_flag, 1);&amp;#10;    distractor_onset = t;&amp;#10;    distract_stimulus_started = true;&amp;#10;}&amp;#10;if ((((! distract_stimulus_ended) &amp;&amp; (t &gt; 0.633)) &amp;&amp; (t &lt; 1.433))) {&amp;#10;    psychoJS.window.callOnFlip(p.send_flag, 0);&amp;#10;    distractor_offset = t;&amp;#10;    distract_stimulus_ended = true;&amp;#10;}&amp;#10;if ((((! target_stimulus_started) &amp;&amp; (t &gt; 1.433)) &amp;&amp; (t &lt; 1.566))) {&amp;#10;    psychoJS.window.callOnFlip(p.send_flag, 2);&amp;#10;    target_onset = t;&amp;#10;    target_stimulus_started = true;&amp;#10;}&amp;#10;if (((! target_stimulus_ended) &amp;&amp; (t &gt; 1.566))) {&amp;#10;    psychoJS.window.callOnFlip(p.send_flag, 0);&amp;#10;    target_offset = t;&amp;#10;    target_stimulus_ended = true;&amp;#10;}&amp;#10;[which_key, press_time] = p.kb_check(p.get_key_index([&quot;F&quot;, &quot;G&quot;, &quot;J&quot;, &quot;N&quot;, &quot;ESC&quot;]));&amp;#10;if (((key_response === null) &amp;&amp; (which_key.size !== 0))) {&amp;#10;    psychopy_response_time = ((t - target_onset) * 1000.0);&amp;#10;    key_response = p.get_key(which_key[0]);&amp;#10;    key_press_time = press_time[0];&amp;#10;    if ((key_response === &quot;ESC&quot;)) {&amp;#10;        p.close();&amp;#10;        core.quit();&amp;#10;    }&amp;#10;    key_correct = (corrAns.toUpperCase() === key_response);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="p.send_flag(0);&amp;#10;if ((key_response !== null)) {&amp;#10;    [_, _, flags, times] = p.get_last_n_samples((3 * sample_rate));&amp;#10;    flag_indexes = p.find_nonzero_flags(flags);&amp;#10;    flag_onsets = np.asarray(times)[flag_indexes];&amp;#10;    arduino_response_time = (key_press_time - flag_onsets[1]);&amp;#10;    psychoJS.experiment.addData(&quot;Response Key&quot;, key_response);&amp;#10;    psychoJS.experiment.addData(&quot;Key Correct&quot;, key_correct);&amp;#10;    psychoJS.experiment.addData(&quot;PsychoPy Response Time (ms)&quot;, psychopy_response_time);&amp;#10;    psychoJS.experiment.addData(&quot;Distractor_Onset_PsychoPy&quot;, distractor_onset);&amp;#10;    psychoJS.experiment.addData(&quot;Target_Onset_PsychoPy&quot;, target_onset);&amp;#10;    psychoJS.experiment.addData(&quot;Arduino Response Time (ms)&quot;, arduino_response_time);&amp;#10;    psychoJS.experiment.addData(&quot;Distractor_Onset_Arduino (ms)&quot;, flag_onsets[0]);&amp;#10;    psychoJS.experiment.addData(&quot;Target_Onset_Arduino (ms)&quot;, flag_onsets[1]);&amp;#10;    psychoJS.experiment.addData(&quot;Arduino Key Press Time (ms)&quot;, key_press_time);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="p.send_flag(0)&amp;#10;&amp;#10;if key_response is not None:&amp;#10;    # get all the samples from the last 3s.&amp;#10;    # The number of samples examined should vary based on the sample rate&amp;#10;    # and trial duration (e.g., trial duration x sample rate).&amp;#10;    _, _, flags, times = p.get_last_n_samples(3*sample_rate)&amp;#10;    flag_indexes = p.find_nonzero_flags(flags)&amp;#10;    flag_onsets = np.asarray(times)[flag_indexes]&amp;#10;&amp;#10;    # Indicate the flag corresponding to target stimulus onset (0 = distractor, 1 = target)&amp;#10;    arduino_response_time = key_press_time - flag_onsets[1]&amp;#10;    &amp;#10;    #save to file &amp;#10;    thisExp.addData('Response Key', key_response)&amp;#10;    thisExp.addData('Key Correct', key_correct)&amp;#10;    thisExp.addData('PsychoPy Response Time (ms)', psychopy_response_time)&amp;#10;    thisExp.addData('Distractor_Onset_PsychoPy', distractor_onset)&amp;#10;    thisExp.addData('Target_Onset_PsychoPy', target_onset)&amp;#10;    &amp;#10;    #Add to .csv file&amp;#10;    thisExp.addData('Arduino Response Time (ms)', arduino_response_time)&amp;#10;    thisExp.addData('Distractor_Onset_Arduino (ms)', flag_onsets[0])&amp;#10;    thisExp.addData('Target_Onset_Arduino (ms)', flag_onsets[1])&amp;#10;    thisExp.addData('Arduino Key Press Time (ms)', key_press_time)&amp;#10;   " valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="key_trial" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Hide_Cursor">
      <CodeComponent name="code_2">
        <Param val="import pressurekeyboard as pkb&amp;#10;import numpy as np&amp;#10;import time" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as pkb from 'pressurekeyboard';&amp;#10;import * as np from 'numpy';&amp;#10;import * as time from 'time';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="output_path = r'C:\Users\acclab-admin\Dropbox (University of Michigan)\LSA-ACCLAB\Experiments_ACC_LAB\2022_2023\Matt\CSE\Neut_E2_Full\Force'&amp;#10;sample_rate = 500&amp;#10;p = pkb.PressureKeyboard()&amp;#10;p.start_reading()  # starts background thread to read data into buffer&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="p.set_sample_rate(sample_rate);&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="p.set_sample_rate(sample_rate)# sets the sample rate&amp;#10;&amp;#10;#set Code Type to Both to run both online and offline&amp;#10;&amp;#10;#Python code to hide cursor (offline)&amp;#10;win.mouseVisible = False&amp;#10;&amp;#10;#JS code below that is inputted on the right (online)&amp;#10;#document.body.style.cursor='none';" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="p.close()&amp;#10;&amp;#10;#if not output_path == &quot;&quot;:&amp;#10;#    p.save_all_data(f&quot;{output_path}{expInfo['participant']}_pressure-data.csv&quot;)&amp;#10;    " valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="p.close();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Practice_Code">
      <CodeComponent name="pract_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Practice.csv'&amp;#10;NameOfBlock = 'Practice'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 36&amp;#10;    nTestTrials = 36&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="pract_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Interval">
      <TextComponent name="Interval_Text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Interval_Text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.8" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="Interval_Blank">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Interval_Blank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1.8" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="First_Test_Block">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test1.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="GoodJob_1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="GoodJob_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Good job!&amp;#10;&amp;#10;Now we can start the test trials&amp;#10;&amp;#10;Press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_13">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_13" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_1">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Second_Test_Block">
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test2.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Eight_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Eight_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are eight more test blocks.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_14">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_14" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Third_Test_Block">
      <CodeComponent name="code_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test3.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Seven_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Seven_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are seven more test blocks.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_15">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_15" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_3">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Fourth_Test_Block">
      <CodeComponent name="code_6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test4.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Six_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Six_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are six more test blocks.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_16">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_16" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_4">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_4" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Fifth_Test_Block">
      <CodeComponent name="code_7">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test5.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_7" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Five_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Five_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are five more test blocks.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_17">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_17" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_5">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_5" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Sixth_Test_Block">
      <CodeComponent name="code_8">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test6.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_8" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Four_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Four_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are four more test blocks&amp;#10;&amp;#10;You may rest before the next test block starts&amp;#10;&amp;#10;When you are ready, press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_18">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_18" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_6">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_6" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Seventh_Test_Block">
      <CodeComponent name="code_9">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test7.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_9" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Three_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Three_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are three more test blocks.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_19">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_19" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_7">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_7" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Eighth_Test_Block">
      <CodeComponent name="code_10">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test8.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_10" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Two_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Two_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There are two more test blocks&amp;#10;&amp;#10;You may rest before the next test block starts&amp;#10;&amp;#10;When you are ready, press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_20">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_20" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_8">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_8" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Ninth_Test_Block">
      <CodeComponent name="code_11">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test9.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_11" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="One_More">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="One_More" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There is one more test block.&amp;#10;&amp;#10;You may rest before the next test block starts.&amp;#10;&amp;#10;When you are ready, press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_21">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_21" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Ready_9">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_9" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Tenth_Test_Block">
      <CodeComponent name="code_12">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="x = 1 #placeholder&amp;#10;NameOfFile = str(int(expInfo['participant'])) + '_Conditions_Test10.csv'&amp;#10;NameOfBlock = 'Test'&amp;#10;&amp;#10;if x == 1:&amp;#10;&amp;#10;    nTrials = 72&amp;#10;    nTestTrials = 72&amp;#10;    nTrialTypes = 3&amp;#10;    nUniqueStimuli = 12&amp;#10;    nTrialsPerRun = nTrials&amp;#10;    nStimsPerBlock = nTrialsPerRun&amp;#10;&amp;#10;    #initialize variables&amp;#10;    nTrialsPerBlock = int(nTrials)&amp;#10;    nBlocks = int(nTrials / nTrialsPerBlock)&amp;#10;&amp;#10;    #Allows us to start over if the program gets stuck&amp;#10;    repeatvar = 1&amp;#10;&amp;#10;    #Sequence =[];&amp;#10;&amp;#10;    for thisBlock in range(0, nBlocks):&amp;#10;        &amp;#10;        while repeatvar == 1:&amp;#10;&amp;#10;            #First, we define an n by n matrix, where n=# of trial types to be randomized.&amp;#10;            #Each number in the matrix indicates how many times each trial type is to be followed and preceded by every trial type in the design.&amp;#10;            matrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;&amp;#10;            repeatvar = 0&amp;#10;&amp;#10;            #Calculate first trial. Trial starts at point 0 (vs 1 in MATLAB)&amp;#10;            a = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #OK- let's pretend that the first trial really did follow another trial type.&amp;#10;            #Randomly pick the previous trial type.&amp;#10;            prev_trial_type = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;&amp;#10;            #Also, since this is the first trial (i.e., trial 1), it's odd. Odd = 0, Even = 1 for python&amp;#10;            current_odd_even = 0&amp;#10;    &amp;#10;            #Decrement the appropropriate counter&amp;#10;            matrix[current_odd_even, prev_trial_type,a] = matrix[current_odd_even, prev_trial_type,a] - 1&amp;#10;&amp;#10;            #create a counter for the a variable. Will try to &quot;append&quot; the post value to this list&amp;#10;            b = [a]&amp;#10;&amp;#10;            #Create the rest of the trial sequence&amp;#10;            for counter in range(0, nTrialsPerBlock-1):&amp;#10;&amp;#10;                if counter % 2:&amp;#10;                    current_odd_even = 0#odd-numbered trial&amp;#10;        &amp;#10;                else:&amp;#10;                    current_odd_even = 1#even-numbered trial&amp;#10;&amp;#10;                post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;    &amp;#10;                #check sum across the third dimension (&quot;prev trial&quot;) to see if there are any remaining positions.&amp;#10;                if np.sum(matrix[current_odd_even, :,b[counter]]) == 0:&amp;#10;&amp;#10;                    print('WE HAVE TO REPEAT BECAUSE WE GOT STUCK!')&amp;#10;                    counter=nTrials-1&amp;#10;                    repeatvar=1&amp;#10;                    break&amp;#10;            &amp;#10;                else:&amp;#10;&amp;#10;                    while matrix[current_odd_even,post, b[counter]] == 0:&amp;#10;                        post = int(np.floor(np.random.random() * nTrialTypes))&amp;#10;                    &amp;#10;                matrix[current_odd_even, post, b[counter]] = matrix[current_odd_even, post, b[counter]]- 1&amp;#10;                b.append(post)&amp;#10;                &amp;#10;    TrialSequence = b&amp;#10;&amp;#10;    OddCongTrials = np.concatenate([1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 2 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddCongTrials)&amp;#10;&amp;#10;    EvenCongTrials = np.concatenate([3 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 4 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenCongTrials)&amp;#10;&amp;#10;    OddIncongTrials = np.concatenate([5 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 6 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddIncongTrials)&amp;#10;&amp;#10;    EvenIncongTrials = np.concatenate([7 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 8 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenIncongTrials)&amp;#10;    &amp;#10;    OddNeutTrials = np.concatenate([9 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 10 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(OddNeutTrials)&amp;#10;&amp;#10;    EvenNeutTrials = np.concatenate([11 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int), 12 * 1 * np.ones([int((nTrialsPerRun / nUniqueStimuli))], dtype = int)])&amp;#10;    np.random.shuffle(EvenNeutTrials)&amp;#10;&amp;#10;&amp;#10;    StimulusSequence = 10 * np.ones(nTrialsPerRun, dtype = int)&amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if (ThisTrial) % 2:&amp;#10;&amp;#10;            if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddCongTrials[0]&amp;#10;&amp;#10;                OddCongTrials = OddCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;            elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddIncongTrials[0]&amp;#10;&amp;#10;                OddIncongTrials = OddIncongTrials[1:]&amp;#10;                &amp;#10;                &amp;#10;            elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                StimulusSequence[ThisTrial] = OddNeutTrials[0]&amp;#10;&amp;#10;                OddNeutTrials = OddNeutTrials[1:]&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;                if TrialSequence[ThisTrial] == 0:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenCongTrials[0]&amp;#10;&amp;#10;                    EvenCongTrials = EvenCongTrials[1:]&amp;#10;&amp;#10;&amp;#10;                elif TrialSequence[ThisTrial] == 1:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenIncongTrials[0]&amp;#10;&amp;#10;                    EvenIncongTrials = EvenIncongTrials[1:]&amp;#10;                    &amp;#10;                    &amp;#10;                elif TrialSequence[ThisTrial] == 2:&amp;#10;&amp;#10;                    StimulusSequence[ThisTrial] = EvenNeutTrials[0]&amp;#10;&amp;#10;                    EvenNeutTrials = EvenNeutTrials[1:]&amp;#10;&amp;#10;&amp;#10;    RunType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    RunType = RunType.split(' ')&amp;#10;                &amp;#10;    CurrTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CurrTrialType = CurrTrialType.split(' ')&amp;#10;                &amp;#10;    PrevTrialType = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    PrevTrialType = PrevTrialType.split(' ')&amp;#10;                &amp;#10;&amp;#10;    for ThisTrial in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        RunType[ThisTrial]= NameOfBlock&amp;#10;    &amp;#10;        if (StimulusSequence[ThisTrial] &lt; 5):&amp;#10;            CurrTrialType[ThisTrial] = 'Congruent'&amp;#10;                        &amp;#10;        elif (StimulusSequence[ThisTrial] &gt; 4) and (StimulusSequence[ThisTrial] &lt; 9):     &amp;#10;            CurrTrialType[ThisTrial] = 'Incongruent'&amp;#10;            &amp;#10;        else:&amp;#10;            CurrTrialType[ThisTrial] = 'Neutral'&amp;#10;&amp;#10;        if (ThisTrial == 0):&amp;#10;            PrevTrialType[ThisTrial] = 'None'&amp;#10;                        &amp;#10;        else:&amp;#10;            PrevTrialType[ThisTrial] = CurrTrialType[ThisTrial - 1]&amp;#10;                        &amp;#10;&amp;#10;    Distractor = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Distractor = Distractor.split(' ')&amp;#10;                    &amp;#10;    Target = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Target = Target.split(' ')&amp;#10;                    &amp;#10;    CorrectAnswer = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    CorrectAnswer = CorrectAnswer.split(' ')&amp;#10;    &amp;#10;    Orientation_Prime = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Prime = Orientation_Prime.split(' ')&amp;#10;    &amp;#10;    Orientation_Probe = str(np.ones(nTrialsPerRun, dtype = int))&amp;#10;    Orientation_Probe = Orientation_Probe.split(' ')&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    for jjj in range(0,nTrialsPerRun):&amp;#10;&amp;#10;        if StimulusSequence[jjj] == 1:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 2:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 3:&amp;#10;        &amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;                        &amp;#10;        elif StimulusSequence[jjj] == 4:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] = 'g'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 5:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Down.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 6:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Up.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 7:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Right.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 8:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/D_Left.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;            &amp;#10;        elif StimulusSequence[jjj] == 9:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Up.png'&amp;#10;            CorrectAnswer[jjj] = 'j'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 10:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Vert.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Down.png'&amp;#10;            CorrectAnswer[jjj] = 'n'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 11:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj] = 'Visual_Stimuli/T_Left.png'&amp;#10;            CorrectAnswer[jjj] = 'f'&amp;#10;&amp;#10;        elif StimulusSequence[jjj] == 12:&amp;#10;&amp;#10;            Distractor[jjj] = 'Visual_Stimuli/N_Horiz.png'&amp;#10;            Target[jjj]= 'Visual_Stimuli/T_Right.png'&amp;#10;            CorrectAnswer[jjj] ='g'&amp;#10;    &amp;#10;    &amp;#10;        #The routine below checks if the counterbalancing worked.&amp;#10;        #To see CheckMatrix, uncomment &quot;print(CheckMatrix)&quot;&amp;#10;        #initialization (top) and final value at the end.&amp;#10;        #This allows one to see the initial and final values of each cell of the counterbalancing matrix, which should be &amp;#10;        #Initial: nTrials/(nTrialTypes*nTrialTypes)/2&amp;#10;        #Final: 0&amp;#10;&amp;#10;        #Create a matrix of previous and current trial combinations, with separate&amp;#10;        #identical holders for odd and even trials like above&amp;#10;        #CheckMatrix = np.array(((int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)),(int((nTrialsPerBlock / (nTrialTypes * nTrialTypes) / 2)) * np.ones([nTrialTypes, nTrialTypes], dtype = int)) ))&amp;#10;        &amp;#10;        for i in range(1, nTrialsPerBlock):&amp;#10;&amp;#10;            #Establish whether this is an odd or even trial&amp;#10;            if i % 2:#odd&amp;#10;        &amp;#10;                Odd_or_Even = 0&amp;#10;        &amp;#10;            else: #even&amp;#10;    &amp;#10;                Odd_or_Even = 1&amp;#10;&amp;#10;        #Decrement the appropriate cell of check matrix&amp;#10;        #CheckMatrix[b[i-1], b[i], Odd_or_Even] = CheckMatrix[b[i-1], b[i], Odd_or_Even] - 1&amp;#10;&amp;#10;        #Finally decremement the &quot;imaginary previous trial type&quot; that we created&amp;#10;        #for the first, odd (Odd_Or_Even =1) trial&amp;#10;        #CheckMatrix[prev_trial_type, b[1], 1] = CheckMatrix[prev_trial_type, b[1], 1]-1 &amp;#10;&amp;#10;        #print(CheckMatrix)         &amp;#10;    &amp;#10;    #delete conditions file if it already exists&amp;#10;    if os.path.isfile(NameOfFile) == 1:&amp;#10;        os.remove(NameOfFile)&amp;#10;       &amp;#10;    Info = {'RunType': '', 'Distractor': '','Target': '', 'corrAns': '', 'CurrTrialType': '', 'PrevTrialType': ''}# -*- coding: utf-8 -*-&amp;#10;&amp;#10;    # An ExperimentHandler isn't essential but helps with data saving&amp;#10;    thisExample = data.ExperimentHandler(name='', version='',&amp;#10;    extraInfo=Info, runtimeInfo=None,&amp;#10;    savePickle=True, saveWideText=True)&amp;#10;&amp;#10;    for i in range(0, nTrials):&amp;#10;        Info['RunType'] = RunType[i]&amp;#10;        Info['Distractor'] = Distractor[i]&amp;#10;        Info['Target'] = Target[i]&amp;#10;        Info['corrAns'] = CorrectAnswer[i]&amp;#10;        Info['CurrTrialType'] = CurrTrialType[i]&amp;#10;        Info['PrevTrialType'] = PrevTrialType[i]&amp;#10;        thisExample.nextEntry()&amp;#10;        &amp;#10;    thisExample.saveAsWideText(NameOfFile)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_12" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="OneMore">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="OneMore" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="There is one more test block&amp;#10;&amp;#10;You may rest before the next test block starts&amp;#10;&amp;#10;When you are ready, press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Ready_10">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Ready_10" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Consent1">
      <ImageComponent name="Consent1_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Consent1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Consent1_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="Consent1_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Consent1_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Consent2">
      <ImageComponent name="Consent2_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Consent2.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Consent2_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="Consent2_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Consent2_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt1">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt1" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Consent3">
      <ImageComponent name="Consent3_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Consent3.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Consent3_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="Consent3_resp">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Consent3_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="FingerPlacement">
      <ImageComponent name="Placement_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="FingerPlacement.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Placement_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="end_on_alt3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Placement_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Placement_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instructions1">
      <KeyboardComponent name="Instructions1_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Instructions1_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="Instructions1_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Instructions1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Instructions1_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="Instructions2">
      <KeyboardComponent name="Instructions2_resp">
        <Param val="'n'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Instructions2_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_Down_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;N&quot;, &quot;ESC&quot;]))  # check for N key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;N&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;N&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;N&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_Down_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="Instructions2_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Instructions2.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Instructions2_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="Debrief1">
      <KeyboardComponent name="End_Response">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="End_Response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt_23">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_23" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Debrief1_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Debrief1_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Debriefing &amp;#10;&amp;#10;Irrelevant directional information can distract us and slow our ability to react in the moment. For example, imagine you are driving somewhere unfamiliar. Your GPS shows an arrow indicating that you should turn left but the road sign has an arrow indicating that you need to turn right. In this case, your GPS is a distraction that makes it difficult for you to turn to the right. Thus, you will likely be slower to turn right than if your GPS had also shown an arrow pointing to the right. &amp;#10;&amp;#10;In the task you just completed, these dynamics are also in play. In a trial wherein the first, distracting arrow points in a different direction than the second, target arrow – for example, when a left arrow precedes a right arrow – people are slower to identify the target arrow than when both arrows point in the same direction. Here, as in the GPS example, the first arrow is a distraction that impairs subjects’ ability to quickly identify the direction of the second arrow. &amp;#10;&amp;#10;Interestingly, subjects are less distractible right after we distract them. For example, after a trial that shows a left arrow and then a right arrow, people aren’t as distracted by an up arrow that precedes a down arrow. In other words, people “adapt” to being distracted, which makes them less susceptible to distraction in the future. We included trials with “neutral” rectangle distractors as a baseline for measuring precisely how people adapt to distraction (e.g., by focusing more on the target after the two arrows point in different directions, by focusing more on the distractor after the two arrows point in the same direction, or both).&amp;#10; &amp;#10;We think that such adaptation occurs because people expect the current trial to resemble the previous one. So, if the two arrows in the previous trial pointed in different directions, people anticipate that the two arrows in the current trial will also point in different directions. This would be like expecting your GPS to show an arrow that points in the wrong direction after doing so in the recent past. In this case, you wouldn’t be fooled by your GPS’s inaccuracy as much as if it had been correct previously. That is, you would adapt to distraction caused by your GPS. &amp;#10;&amp;#10;If you are interested in learning more about our research investigating how people minimize distraction from irrelevant stimuli, please see the papers below.&amp;#10;&amp;#10;References:&amp;#10;&amp;#10;Grant, L.D. &amp; Weissman, D.H. (2017). An attentional mechanism for minimizing cross-modal distraction. Acta Psychologica, 174, 9-16.&amp;#10;&amp;#10;Weissman, D.H., Jiang, J., &amp; Egner, T. (2014). Determinants of congruency sequence effects without learning and memory confounds. Journal of Experimental Psychology: Human  Perception and Performance, 40(5), 2022-2037.&amp;#10;&amp;#10;Press the spacebar to continue. " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Debrief2">
      <TextComponent name="Debrief2_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Debrief2_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you have questions about this research, including questions about your compensation for participating, you may contact the following:&amp;#10;&amp;#10;Investigators: Daniel H. Weissman, Matthew Dunaway, and Selena Tran&amp;#10;Email: danweiss@umich.edu, mdunawa@umich.edu, sltran@umich.edu&amp;#10;Mailing Address: 1012 East Hall&amp;#10;Department of Psychology&amp;#10;530 Church St&amp;#10;Ann Arbor, MI 48109&amp;#10;Telephone: (734) 615-8038&amp;#10;&amp;#10;Press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_24">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_24" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Debrief2_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Debrief2_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Debrief3">
      <TextComponent name="Debrief3_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Debrief3_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you have any questions about your rights as a research participant, or wish to obtain information, ask questions, or discuss any concerns about this study with someone other than the researcher(s), please contact the &amp;#10;&amp;#10;University of Michigan Health Sciences and Behavioral Sciences Institutional Review Board&amp;#10;&amp;#10;North Campus Research Complex&amp;#10;2800 Plymouth Road&amp;#10;Building 520, Room 1169&amp;#10;Ann Arbor, MI 48109-2800&amp;#10;&amp;#10;Phone: (734) 936-0933&amp;#10;Fax: 734-936-1852&amp;#10;E-mail: irbhsbs@umich.edu&amp;#10;&amp;#10;Press the spacebar to end the experiment." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_25">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()&amp;#10;        " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_25" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Debrief3_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Debrief3_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Debrief4">
      <TextComponent name="Debrief4_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Debrief4_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you have any questions about your rights as a research participant, or wish to obtain information, ask questions, or discuss any concerns about this study with someone other than the researcher(s), please contact the &amp;#10;&amp;#10;University of Michigan Health Sciences and Behavioral Sciences Institutional Review Board&amp;#10;&amp;#10;North Campus Research Complex&amp;#10;2800 Plymouth Road&amp;#10;Building 520, Room 1169&amp;#10;Ann Arbor, MI 48109-2800&amp;#10;&amp;#10;Phone: (734) 936-0933&amp;#10;Fax: 734-936-1852&amp;#10;E-mail: irbhsbs@umich.edu&amp;#10;&amp;#10;Press the spacebar to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Debrief4_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Debrief4_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Thanks">
      <TextComponent name="Thanks_txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Thanks_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This is the end of the experiment.&amp;#10;&amp;#10;Thank you for participating!&amp;#10;&amp;#10;Press any key to exit." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Thanks_resp">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Thanks_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Completion">
      <TextComponent name="Completion_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Completion_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Congratulations on finishing the test blocks!&amp;#10;&amp;#10;&amp;#10;Press the spacebar for the debriefing." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_22">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_22" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Completion_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Completion_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instructions3">
      <ImageComponent name="Instructions3_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Instructions3.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Instructions3_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="Instructions3_resp">
        <Param val="'g'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Instructions3_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instructions4">
      <KeyboardComponent name="key_resp_2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="end_on_alt7">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt7" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Instructions4_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Instructions4_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please remember to respond as fast as possible without making mistakes.&amp;#10;If you press the wrong key or take longer than 900 ms to respond an error message will appear.&amp;#10;&amp;#10;We will now give you two practice blocks.&amp;#10;Each practice block will last about 50 seconds.&amp;#10;&amp;#10;After the practice blocks, there will be 9 test blocks.&amp;#10;Each test block will last about 3 minutes.&amp;#10;&amp;#10;Press the spacebar to begin&amp;#10;&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Reminder">
      <ImageComponent name="Reminder1_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Instructions1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Reminder1_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="end_on_alt6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt6" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_3">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="InstructReminder">
      <ImageComponent name="Reminder2_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Instruct_Reminder.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="Reminder2_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.3, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="end_on_alt_12">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_12" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="Reminder2_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Reminder2_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SecondPracticeBlock">
      <TextComponent name="SecondPractice_Txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="SecondPractice_Txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Good Job!&amp;#10;&amp;#10;There is one more practice block&amp;#10;&amp;#10;Press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.25" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="end_on_alt_11">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(0.1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(0.1)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="which_key, _ = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]))  # check for ALT key&amp;#10;if which_key.size != 0:&amp;#10;    if p.get_key(which_key[0]) == &quot;ALT&quot;:&amp;#10;        continueRoutine = False  # finish the routine&amp;#10;    elif p.get_key(which_key[0]) == &quot;ESC&quot;:&amp;#10;        p.close()&amp;#10;        core.quit()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[which_key, _] = p.kb_check(p.get_key_index([&quot;ALT&quot;, &quot;ESC&quot;]));&amp;#10;if ((which_key.size !== 0)) {&amp;#10;    if ((p.get_key(which_key[0]) === &quot;ALT&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((p.get_key(which_key[0]) === &quot;ESC&quot;)) {&amp;#10;            p.close();&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="end_on_alt_11" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="SecondPractice_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="SecondPractice_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="save_all_data">
      <CodeComponent name="code_13">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time.sleep(2.0);&amp;#10;if ((! (output_path === &quot;&quot;))) {&amp;#10;    p.save_all_data(`${output_path}${expInfo[&quot;participant&quot;]}_pressure-data.csv`);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time.sleep(2.0)&amp;#10;if not output_path == &quot;&quot;:&amp;#10;    p.save_all_data(f&quot;{output_path}{expInfo['participant']}_pressure-data.csv&quot;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_13" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Hide_Cursor"/>
    <Routine name="Consent1"/>
    <Routine name="Consent2"/>
    <Routine name="Consent3"/>
    <Routine name="FingerPlacement"/>
    <Routine name="Instructions1"/>
    <Routine name="Instructions2"/>
    <Routine name="Reminder"/>
    <Routine name="Instructions4"/>
    <Routine name="Practice_Code"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Pract1">
      <Param name="Selected rows" updates="None" val="0:18" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Pract1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Pract1"/>
    <Routine name="SecondPracticeBlock"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Pract2">
      <Param name="Selected rows" updates="None" val="18:35" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Pract2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Pract2"/>
    <Routine name="First_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_1"/>
    <Routine name="Second_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_2"/>
    <Routine name="Third_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_3"/>
    <Routine name="Fourth_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_4">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_4"/>
    <Routine name="Fifth_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_5">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_5"/>
    <Routine name="Sixth_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_6">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_6"/>
    <Routine name="Seventh_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_7">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_7" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_7"/>
    <Routine name="Eighth_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_8">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_8" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_8"/>
    <Routine name="Ninth_Test_Block"/>
    <Routine name="InstructReminder"/>
    <Routine name="Interval"/>
    <LoopInitiator loopType="TrialHandler" name="Trials_9">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$NameOfFile" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="Trials_9" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Trial"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="Trials_9"/>
    <Routine name="save_all_data"/>
    <Routine name="Completion"/>
    <Routine name="Debrief1"/>
    <Routine name="Debrief2"/>
    <Routine name="Debrief3"/>
  </Flow>
</PsychoPy2experiment>
